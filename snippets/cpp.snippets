snippet dbg "Debug Template"
	#ifdef LOCAL
	#include "debug.h"
	#else
	#define dbg(...)
	#endif
snippet d "Debug"
	dbg($0);
snippet ina "Read Array"
	for (auto &x : ${1:a}) cin >> x;
	$0
snippet outa "Write Array"
    for (int i = 0; i < n; i++) {
        cout << ${1:a}[i] << (i + 1 < n ? ' ' : '\n');
    }
	$0
snippet remdup "Remove Duplicates"
	sort(${1:a}.begin(), $1.end()); $1.erase(unique($1.begin(), $1.end()), $1.end());
	$0
snippet pq "Priority Queue"
	priority_queue<${1:pair<int, int>}, vector<$1>, greater<$1>> ${2:pq};
	$0
snippet setpre "Floating Point Precision"
	cout << fixed << setprecision($1);
snippet pref "Prefix Sum"
	vector<int> pref(${1:n} + 1);
    for (int i = 0; i < $1; i++) {
        pref[i + 1] = pref[i] + ${2:a}[i];
    }
	$0
snippet suff "Suffix Sum"
	vector<int> suff(${1:n} + 1);
    for (int i = $1 - 1; i >= 0; i--) {
		suff[i] = suff[i + 1] + ${2:a}[i];
    }
	$0
snippet nextp "Next Permutation"
	do {
		$0
	} while (next_permutation(${1:a}.begin(), $1.end()));
snippet class
	/*! \class $1
	*  \brief ${3:Brief class description}
	*
	*  ${4:Detailed description}
	*/
	class ${1:`vim_snippets#Filename('$1', 'name')`} {
		public:
			$1(${2});
			virtual ~$1();

		protected:
			m_${5}; /*!< ${6:Member description} */
	};
snippet try
	try {
	} catch (${1}) {
	}
snippet uid Uniform Integer Distribution
	uniform_int_distribution<int>($1, $2)(rng)
	mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
snippet sqrt "Square Root"
	int sqrrt(int n) {
		int lo = 0, hi = 2e9;
		while (hi - lo > 1) {
			int mid = lo + (hi - lo) / 2;

			if (mid * mid <= n) lo = mid;
			else hi = mid;
		}
		return lo;
	}
snippet factorise "Prime Factorisation of a number"
	vector<pair<int, int>> primeFactors(int n) {
		vector<pair<int, int>> divisors;

		if (n % 2 == 0) {
			divisors.emplace_back(2, 0);
			do {
				n /= 2;
				++divisors.back().second;
			} while (n % 2 == 0);
		}

		for (int i = 3; i * i <= n; i += 2) {
			if (n % i == 0) {
				divisors.emplace_back(i, 0);
				do {
					n /= i;
					++divisors.back().second;
				} while (n % i == 0);
			}
		}
		if (n > 1) divisors.emplace_back(n, 1);
		return divisors;
	}
snippet zfun "Z-Function"
	vector<int> zFunc(string &s) {
		int n = sz(s), l = 0, r = 0;
		vector<int> z(n);

		for (int i = 1; i < n; i++) {
			if (i <= r) z[i] = min(r - i + 1, z[i - l]);
			while (i + z[i] < n && s[z[i]] == s[i + z[i]]) ++z[i];
			if (i + z[i] - 1 > r) l = i, r = i + z[i] - 1;
		}
		return z;
	}
snippet preffun "Prefix Function"
	vector<int> prefFunc(string &s) {
		int n = sz(s);
		vector<int> pi(n);

		for (int i = 1; i < n; i++) {
			int j = pi[i - 1];
			while (j > 0 && s[i] != s[j]) j = pi[j - 1];
			if (s[i] == s[j]) ++j;
			pi[i] = j;
		}
		return pi;
	}
snippet subset "Subsets using Bitmask"
	for (int mask = 0; mask < (1 << n) - 1; mask++) {
		for (int j = 0; j < n; j++) {
			if (mask >> j & 1) {
				$0
			}
		}
	}
snippet sieve "Sieve of Eratothenes"
	int N = 2e5 + 5;
	vector<bool> is_prime(N + 1, true);

	void init() {
		is_prime[0] = is_prime[1] = false;
		for (int i = 2; i * i <= N; i++) {
			if (is_prime[i]) {
				for (int j = i * i; j <= N; j += i) {
					is_prime[j] = false;
				}
			}
		}
	}
snippet isp "Palindrome"
	bool isPalindrome(const string_view &s) {
		return equal(s.begin(), s.begin() + s.size()/2, s.rbegin());
	}
snippet dsu "Disjoint Set Union"
	class DSU {
		int n;
		vector<vector<int>> graph;
		vector<int> label, SZ;

		void init(int _n) {
			n = _n;
			graph = vector<vector<int>> (n);
			label = SZ = vector<int> (n);
			for (int i = 0; i < n; i++) {
				SZ[i] = 1; label[i] = i;
			}
		}

		void relabel(int v, int target) { //relabel comp of v to target
			if (label[v] == target) return;
			label[v] = target;

			for (int x: graph[v]) relabel(x, target);
		}

		void merge(int a, int b) {
			if (label[a] == label[b]) return;

			graph[a].push_back(b);
			graph[b].push_back(a);

			if (SZ[label[a]] > SZ[label[b]]) swap(a, b); //assume SZ[label[a]] <= SZ[label[b]]

			SZ[label[b]] += SZ[label[a]];
			SZ[label[a]] = 0;
			relabel(a, label[b]);
		}

		int find(int n) { return label[n]; }
	};
snippet mod "Modular Arithmetic"
	const int MOD = 1e9 + 7; // 998244353;

	int64_t madd(int64_t a, int64_t b) { return (a + b) % MOD; }
	int64_t msub(int64_t a, int64_t b) { return (((a - b) % MOD) + MOD) % MOD; }
	int64_t mmul(int64_t a, int64_t b) { return ((a % MOD) * (b % MOD)) % MOD; }
	int64_t mpow(int64_t a, int64_t b) {
		int64_t res = 1;
		while (b > 0) {
			if (b & 1) res = (res * a) % MOD;
			a = (a * a) % MOD;
			b >>= 1;
		}
		return res;
	}
	int64_t minv(int64_t a) { return mpow(a, MOD - 2); }
	int64_t mdiv(int64_t a, int64_t b) { return mmul(a, minv(b)); }
snippet pnc "Combinatorics"
	const int64_t NC = 1.1e6; // 2e5 + 5;
	array<int64_t, NC> fact, factinv, inv;

	void init() {
		fact[0] = fact[1] = 1;
		for (int64_t i = 2; i < NC; i++) {
			fact[i] = mmul(i, fact[i - 1]);
		}

		inv[1] = 1;
		for (int64_t i = 2; i < NC; i++) {
			inv[i] = mmul((MOD - MOD / i), inv[MOD % i]);
		}

		factinv[0] = factinv[1] = 1;
		for (int64_t i = 2; i < NC; i++) {
			factinv[i] = mmul(inv[i], factinv[i - 1]);
		}
	}

	int64_t ncr(int64_t n, int64_t r) {
		if (n < r) return 0;
		return mmul(fact[n], mmul(factinv[r], factinv[n - r]));
	}
snippet pbds "Policy Based DS"
	#include <ext/pb_ds/assoc_container.hpp>
	#include <ext/pb_ds/tree_policy.hpp>
	using namespace __gnu_pbds;

	template <typename T> using oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
	// find_by_order(k) return kth element. 0 indexed
	// order_of_key(k) returns count of elements strictly less than k

	struct custom_hash {
		static uint64_t splitmix64(uint64_t x) {
			// http://xorshift.di.unimi.it/splitmix64.c
			x += 0x9e3779b97f4a7c15;
			x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
			x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
			return x ^ (x >> 31);
		}

		size_t operator()(uint64_t x) const {
			static const uint64_t FIXED_RANDOM =
				chrono::steady_clock::now().time_since_epoch().count();
			return splitmix64(x + FIXED_RANDOM);
		}
	};

	template <class K, class V>
	using safe_map = gp_hash_table<K, V, custom_hash>;
snippet tim "Execution Time"
	auto begin = std::chrono::high_resolution_clock::now();

	auto end = std::chrono::high_resolution_clock::now();
	cerr << "\nExecution time: " << std::chrono::duration_cast<std::chrono::duration<double>> (end-begin).count() << " seconds\n";
